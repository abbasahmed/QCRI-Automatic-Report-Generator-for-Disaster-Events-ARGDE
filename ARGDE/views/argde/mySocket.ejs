
  <div class="content-wrapper">
    <div class="container-fluid">
      <div class="card mb-3">
        <div class="card-header">
          <i class="fa fa-area-chart"></i> Chart 1 </div>
        <div class="card-body">
          <p id="myAreaChart"></p>
        </div>
      </div>
    </div>
  </div>

<script>
var queries = <%- JSON.stringify(queries) %>;
var sockets = {
  minute: io.sails.connect(),
  hour: io.sails.connect(),
  day: io.sails.connect(),
  label: io.sails.connect(),
  class: io.sails.connect(),
  sentiment: io.sails.connect(),
  damage: io.sails.connect(),
};
var allData = {
  minute_data: null,
  hour_data: null,
  day_data: null,
  label_data: null,
  class_data: null,
  sentiment_data: null,
  damage_data: null,
};
var intervals = {
  minuteId: null,
  houtId: null,
  dayId: null,
  labelId: null,
  classId: null,
  sentimentId: null,
  damageId: null,
};
function data()
{
  sockets.minute.get(queries['minute'], function(data, json_obj){
    allData.minute_data = data['minute_data'];
  });
  sockets.hour.get(queries['hour'], function(data, json_obj){
    allData.hour_data = data['hour_data'];
  });
  sockets.day.get(queries['day'], function(data, json_obj){
    allData.day_data = data['day_data'];
  });
  sockets.label.get(queries['label'], function(data, json_obj){
    allData.label_data = data['label_data'];
  });
  sockets.class.get(queries['class'], function(data, json_obj){
    allData.class_data = data['class_data'];
    classGraph();
  });
  sockets.sentiment.get(queries['sentiment'],function(data, json_obj){
    allData.sentiment_data = data['sentiment_data'];
  });
  sockets.damage.get(queries['damage'],function(data, json_obj){
    allData.damage_data = data['damage_data'];
  });
  intervals.minuteId = setInterval(function(){
    if(allData.minute_data!=null)
    {
      /*
      * View Code goes here
      */
      clearInterval(intervals.minuteId);
    }
  },200);
  intervals.hourId = setInterval(function(){
    if(allData.hour_data!=null)
    {
      /*
      * View Code goes here
      */
      clearInterval(intervals.hourId);
    }
  },1);
  intervals.dayId = setInterval(function(){
    if(allData.day_data!=null)
    {
      /*
      * View Code goes here
      */
      clearInterval(intervals.dayId);
    }
  },1);
  intervals.labelId = setInterval(function(){
    if(allData.label_data!=null)
    {
      /*
      * View Code goes here
      */
      clearInterval(intervals.labelId);
    }
  },1);
  function classGraph(){
      var sortedData = [];

var freqData = [];
var clData = [];
var minData = [];
var hourData = [];
var dateData = [];
var monthData = [];
var yearData = [];
var data = [];
var ticks = [];
var ldat;
allData.class_data.forEach(function(entry){ 
  var fdat = (Number(entry.frequency)); 
  freqData = freqData.concat(fdat); 
  ldat = String(entry.class_label); 
  var class_str  = ldat.toString(); 
  clData = clData.concat(ldat);
  var mdat = String(entry.minute); 
  minData = minData.concat(mdat);
  var hdat = String(entry.hour).substr(0,2);
  hourData = hourData.concat(hdat);
  var ddat = new Date(entry.date); 

  var date = String(ddat.getDate()); 
  var year = String(ddat.getFullYear()); 
  var month = Number(ddat.getMonth()); 
  var newMonth = month + 1;
  var newMon = String(newMonth);
  dateData = dateData.concat(date);
  monthData = monthData.concat(newMon);
  yearData = yearData.concat(year);
 }); 


for(i in freqData){

  var timeStamp;

  if(minData[i]<10)
  {
    timeStamp = String(hourData[i]) + ":0" + String(minData[i]);
  }
  else
  {
  timeStamp = String(hourData[i]) + ":" + String(minData[i]);
  }

  var dateStamp = String(yearData[i])+"-"+String(Number(monthData[i]))+"-"+String(dateData[i]) +","+timeStamp;

  var d = new Date(Number(yearData[i]), Number(monthData[i]), Number(dateData[i]));

  var formatFreq = Number(freqData[i]);

  if(clData[i] == "infrastructure_and_utilities_damage"){
    clData[i] =  "Infrastructure and Utilities Damage";
  } else if(clData[i] == "caution_and_advice"){
    clData[i] = "Caution and Advice";
  } else if(clData[i] == "displaced_and_evacuations"){
    clData[i] = "Displaced and Evacuations";
  } else if(clData[i] == "affected_individual"){
    clData[i] = "Affected Individuals";
  } else if(clData[i] == "donation_and_volunteering"){
    clData[i] = "Donation and Volunteering";
  } else if(clData[i] == "missing_and_found_people"){
    clData[i] = "Missing and Found People";
  } else if(clData[i] == "injured_or_dead_people"){
    clData[i] = "Injured or Dead People";
  } else if(clData[i] == "sympathy_and_support"){
    clData[i] = "Sympathy and Support";
  } else if(clData[i] == "relevant_information"){
    clData[i] = "Relevant Information";
  } else if(clData[i] == "not_related_or_irrelevant"){
    clData[i] = "Not Related or Irrelevant";
  } else if(clData[i] == "response_efforts"){
    clData[i] = "Response Efforts";
  } else if(clData[i] == "personal"){
    clData[i] = "Personal";
  }

  data[i] = {date: dateStamp, frequency: formatFreq ,label: clData[i]};
  //console.log(data[i]);
};

console.log(data);



    new tauCharts.Chart({
        data: data,
        type: 'stacked-bar',
        x: 'date',
        y: 'frequency',
        color: 'label',
        guide: {
          y:{
            label: 'Frequency',
          },
          color: {
            brewer: {
              'Injured or Dead People': '#824d3b',
              'Donation and Volunteering': '#8e48a0',
              'Not Related or Irrelevant' : '#000000' ,
              'Response Efforts': '#8081d9',
              'Sympathy and Support': '#38ad01',
              'Personal': '#4289f4',
              'Relevant Information': '#bdf0fc',
              'Displaced and Evacuations': '#a5af33',
              'Caution and Advice': '#ffb600',
              'Affected Individuals': '#da96e8',
              'Infrastructure and Utilities Damage': '#b20000',
              'Missing and Found People': '#595959'
            }
          }
        },
        plugins: [
            tauCharts.api.plugins.get('tooltip')(),
            tauCharts.api.plugins.get('legend')({'position': 'left'}),
            tauCharts.api.plugins.get('floating-axes'),
        ],
        }).renderTo('#myAreaChart',{width: 5000, height:600});

      clearInterval(intervals.classId);
    }

  intervals.sentimentId = setInterval(function(){
    if(allData.sentiment_data!=null)
    {
      /*
      * View Code goes here
      */
      clearInterval(intervals.sentimentId);
    }
  },1);
  intervals.damageId = setInterval(function(){
    if(allData.damage_data!=null)
    {
      /*
      * View Code goes here
      */
      clearInterval(intervals.damageId);
    }
  },1);
}
</script>
